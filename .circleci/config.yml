defaults: &defaults
  docker:
  - image: circleci/python:3.6.6-node
  working_directory: ~/singnet
  environment:

    # service info, change this
    SERVICE_DAEMON_PORT_KOVAN: 7090
    SERVICE_DAEMON_PORT_ROPSTEN: 7091
    REPOSITORY: time-series-anomaly-discovery

    # cpp service base image, do not change this
    BASE_CPP_IMAGE_NAME: cpp_service_base_image
      
version: 2
jobs:
  build:    
    <<: *defaults
    steps:
    - run:
        name: Start container based on base cpp-service image
        command: |
          # check if base image exist
          BASIC_IMAGE_STATUS="$(ssh -tt -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST 'docker images --format "{{.ID}}: {{.Repository}}" cpp_*')"

          echo $BASE_CPP_IMAGE_NAME
          echo $BASIC_IMAGE_STATUS
        
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"
          PROD_DOCKER_CONTAINER_NAME="prod_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            # try to remove staging container if it already exists
            echo "Stopping and removing existing staging container for this user..."
            docker stop $STAGING_DOCKER_CONTAINER_NAME || true
            docker rm $STAGING_DOCKER_CONTAINER_NAME || true
            echo "Finished."

            # check if base cpp image exists, if not then build it with the assigned name
            if [ "$BASIC_IMAGE_STATUS" = "" ]; then
              echo "Creating base cpp service image since it does not exist"
              docker build --no-cache -t $BASE_CPP_IMAGE_NAME:latest https://raw.githubusercontent.com/$CIRCLE_PROJECT_USERNAME/$REPOSITORY/master/Dockerfiles/CppServiceBaseDockerfile
              echo "Finish..."
            fi

            # running the cpp service base container
            echo "Running staging container based on the cpp basic service image..."
            docker run -di --name $STAGING_DOCKER_CONTAINER_NAME $BASE_CPP_IMAGE_NAME
            echo "Finished."
         
            # clonning this service repo into the cpp base container
            echo "Downloading the $REPOSITORY service to the staging container..."
            docker exec $STAGING_DOCKER_CONTAINER_NAME /bin/bash -c \
              "cd /home/ubuntu; \
               git clone https://github.com/$CIRCLE_PROJECT_USERNAME/$REPOSITORY.git"
            echo "Finished."
          EOF
    - run:
        name: Build source
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"
          PROD_DOCKER_CONTAINER_NAME="prod_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            # Build source and run tests
            echo "Building source inside staging container and performing integration tests..."
            docker exec $STAGING_DOCKER_CONTAINER_NAME /bin/bash -c \
              "cd /home/ubuntu/$REPOSITORY; \
               make clean; \
               make"
            echo "Finished."
          EOF
    - run:
        name: Perform unit tests
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"
          PROD_DOCKER_CONTAINER_NAME="prod_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            # Build source and run tests
            echo "Building source inside staging container and performing integration tests..."
            docker exec $STAGING_DOCKER_CONTAINER_NAME /bin/bash -c \
              "cd /home/ubuntu/$REPOSITORY; \
               ./bin/release_cxxUnitTestsRunner.out"
            echo "Finished."
          EOF
    - run:
        name: Perform integration tests
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"
          PROD_DOCKER_CONTAINER_NAME="prod_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            # Build source and run tests
            echo "Building source inside staging container and performing integration tests..."
            docker exec $STAGING_DOCKER_CONTAINER_NAME /bin/bash -c \
              "cd /home/ubuntu/$REPOSITORY; \
               ./bin/release_integrationTests.out"
            echo "Finished."
          EOF
    - run:
        name: Deploy service
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"
          PROD_DOCKER_CONTAINER_NAME="prod_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            if [ $CIRCLE_REPOSITORY_URL = "git@github.com:singnet/$REPOSITORY.git" ] && [ $CIRCLE_BRANCH = "master" ] ; then
              echo "This service will be deployed since it passed all tests..."

              # stop old production containers
              echo "Stopping and removing old production container..."
              docker stop $PROD_DOCKER_CONTAINER_NAME || true
              docker rm $PROD_DOCKER_CONTAINER_NAME || true
              echo "Finished."

              # stop staging container
              echo "Stopping and removing staging container..."
              docker stop $STAGING_DOCKER_CONTAINER_NAME || true
              docker rm $STAGING_DOCKER_CONTAINER_NAME || true 
              echo "Finished."

              # running the cpp service container, service daemon and server in a production container
              echo "Creating production container..."
              docker run -tdi \
              -p $SERVICE_DAEMON_PORT_KOVAN:$SERVICE_DAEMON_PORT_KOVAN \
              -p $SERVICE_DAEMON_PORT_ROPSTEN:$SERVICE_DAEMON_PORT_ROPSTEN \
              -v /home/ubuntu/$REPOSITORY/config:/config \
              -v /home/ubuntu/$REPOSITORY/etcd:/etcd \
              -v /home/ubuntu/$REPOSITORY/storage-data-dir-1.etcd:/storage-data-dir-1.etcd \
              --name $PROD_DOCKER_CONTAINER_NAME $BASE_CPP_IMAGE_NAME /bin/bash -c \
                "cd /home/ubuntu; \
                 git clone https://github.com/$CIRCLE_PROJECT_USERNAME/$REPOSITORY.git; \
                 cd $REPOSITORY; \
                 ./setup.sh -dr"
              echo "Finished."
              echo "Service is up."
            else
              echo "================================================================================"
              echo "                        Service WILL NOT be deployed"
              echo "================================================================================"

              # remove staging containers since tests and build failed
              echo "Stopping and removing staging container..."
              docker stop $STAGING_DOCKER_CONTAINER_NAME || true
              docker rm $STAGING_DOCKER_CONTAINER_NAME || true
              echo "Finished."
            fi
          EOF
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
