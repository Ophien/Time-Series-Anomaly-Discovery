defaults: &defaults
  docker:
  - image: circleci/python:3.6.6-node
  working_directory: ~/singnet
  environment:

    # service info, change this
    SERVICE_DAEMON_PORT_KOVAN: 7090
    SERVICE_DAEMON_PORT_ROPSTEN: 7091
    REPOSITORY: time-series-anomaly-discovery

    # cpp service base image, do not change this
    IMAGE_NAME: singnet_time_series_anomaly_discovery
    PROD_DOCKER_CONTAINER_NAME: prod_singnet_time_series_anomaly_discovery

version: 2
jobs:
  build:    
    <<: *defaults
    steps:
    - run:
        name: Start container based on base cpp-service image
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"
          STAGING_IMAGE_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            # try to remove staging container if it already exists
            echo "Stopping and removing existing staging container and images for this user..."
            docker rm -f $STAGING_DOCKER_CONTAINER_NAME || true
            docker rmi -f $STAGING_IMAGE_NAME || true
            echo "Finished."

            docker build \
              --no-cache \
              --build-arg snetd_version=${SNETD_VERSION} \
              --build-arg network=${NETWORK} \
              --build-arg ethereum_json_rpc_endpoint=${ETHEREUM_JSON_RPC_ENDPOINT} \
              --build-arg free_call_signer_address=${FREE_CALL_SIGNER_ADDRESS} \
              --build-arg pvt_key_for_metering=${PVT_KEY_FOR_METERING} \
              -t $STAGING_IMAGE_NAME \
              https://raw.githubusercontent.com/$CIRCLE_PROJECT_USERNAME/$REPOSITORY/$CIRCLE_BRANCH/Dockerfiles/TimeSeriesAnomalyDiscovery

            # running the cpp service base container
            echo "Running staging container based on the cpp basic service image..."
            docker run -di --name $STAGING_DOCKER_CONTAINER_NAME $STAGING_IMAGE_NAME tail -f /dev/null
            echo "Finished."         
          EOF
    - run:
        name: Build source
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            # Build source and run tests
            echo "Building source inside staging container and performing integration tests..."
            docker exec $STAGING_DOCKER_CONTAINER_NAME make
            echo "Finished."
          EOF
    - run:
        name: Perform unit tests
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            # Build source and run tests
            echo "Building source inside staging container and performing integration tests..."
            docker exec $STAGING_DOCKER_CONTAINER_NAME ./bin/release_cxxUnitTestsRunner.out
            echo "Finished."
          EOF
    - run:
        name: Perform integration tests
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            # Build source and run tests
            echo "Building source inside staging container and performing integration tests..."
            docker exec $STAGING_DOCKER_CONTAINER_NAME ./bin/release_integrationTests.out
            echo "Finished."
          EOF
    - run:
        name: Deploy service
        command: |
          # staging and production container names
          STAGING_DOCKER_CONTAINER_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"
          STAGING_IMAGE_NAME="staging_${CIRCLE_PROJECT_USERNAME}_${REPOSITORY}"

          ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST << EOF
            if [ $CIRCLE_REPOSITORY_URL = "git@github.com:singnet/$REPOSITORY.git" ] && [ $CIRCLE_BRANCH = "master" ] ; then
              # stop old production containers and etc
              docker rm -f $PROD_DOCKER_CONTAINER_NAME || true
              docker rm -f $STAGING_DOCKER_CONTAINER_NAME || true 
              docker rmi -f $STAGING_IMAGE_NAME || true
              docker rmi -f $IMAGE_NAME || true
              
              docker build \
                --no-cache \
                --build-arg snetd_version=${SNETD_VERSION} \
                --build-arg network=${NETWORK} \
                --build-arg ethereum_json_rpc_endpoint=${ETHEREUM_JSON_RPC_ENDPOINT} \
                --build-arg free_call_signer_address=${FREE_CALL_SIGNER_ADDRESS} \
                --build-arg pvt_key_for_metering=${PVT_KEY_FOR_METERING} \
                -t $IMAGE_NAME \
                https://raw.githubusercontent.com/$CIRCLE_PROJECT_USERNAME/$REPOSITORY/$CIRCLE_BRANCH/Dockerfiles/TimeSeriesAnomalyDiscovery

              # running the cpp service container, service daemon and server in a production container
              echo "Creating production container..."
              docker run -tdi \
                -p $SERVICE_DAEMON_PORT_KOVAN:$SERVICE_DAEMON_PORT_KOVAN \
                -p $SERVICE_DAEMON_PORT_ROPSTEN:$SERVICE_DAEMON_PORT_ROPSTEN \
                -v /home/ubuntu/$REPOSITORY/config:/config \
                -v /home/ubuntu/$REPOSITORY/etcd:/etcd \
                -v /home/ubuntu/$REPOSITORY/storage-data-dir-1.etcd:/storage-data-dir-1.etcd \
                -v /etc/letsencrypt:/etc/letsencrypt \
                -v ~/singnet/.certs:/opt/singnet/.certs \
                --restart unless-stopped \
                --name $PROD_DOCKER_CONTAINER_NAME $IMAGE_NAME /bin/bash -c "./setup.sh -r"
              echo "Finished."
              echo "Service is up."
            else
              echo "================================================================================"
              echo "                        Service WILL NOT be deployed"
              echo "================================================================================"

              # remove staging containers since tests and build failed
              echo "Stopping and removing staging container..."
              docker stop $STAGING_DOCKER_CONTAINER_NAME || true
              docker rm $STAGING_DOCKER_CONTAINER_NAME || true
              echo "Finished."
            fi
          EOF
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
